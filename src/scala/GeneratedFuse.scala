// DO NOT EDIT! Autogenerated by makeFuseOps
package org.improving.fuse

import com.sun.jna._
import ptr._
import Fuse._
// import CommonStruct._
import jnajava.Fuse._
import jnajava.C._
import Errno._
import Fcntl._
import CSizes._

object GeneratedFuse {
  trait Operations {

    def getattr(path: String, buf: StructStat): Int = -ENOSYS
    def readlink(path: String, buf: Pointer, len: Int): Int = -ENOSYS
    def getdir(p1: String, p2: Int, p3: Int): Int = -ENOSYS
    def mknod(path: String, mode: Short, rdev: Int): Int = -ENOSYS
    def mkdir(path: String, mode: Short): Int = -ENOSYS
    def unlink(path: String): Int = -ENOSYS
    def rmdir(path: String): Int = -ENOSYS
    def symlink(linkname: String, path: String): Int = -ENOSYS
    def rename(oldpath: String, newpath: String): Int = -ENOSYS
    def link(oldpath: String, newpath: String): Int = -ENOSYS
    def chmod(path: String, mode: Short): Int = -ENOSYS
    def chown(path: String, uid: Int, gid: Int): Int = -ENOSYS
    def truncate(path: String, size: Long): Int = -ENOSYS
    def utime(p1: String, p2: Pointer): Int = -ENOSYS
    def open(path: String, fi: StructFuseFileInfo): Int = -ENOSYS
    def read(path: String, buf: Pointer, size: Int, off: Long, fi: StructFuseFileInfo): Int = -ENOSYS
    def write(path: String, buf: Pointer, size: Int, off: Long, fi: StructFuseFileInfo): Int = -ENOSYS
    def statfs(path: String, buf: StructStatvfs): Int = -ENOSYS
    def flush(path: String, fi: StructFuseFileInfo): Int = -ENOSYS
    def release(path: String, fi: StructFuseFileInfo): Int = -ENOSYS
    def fsync(path: String, datasync: Int, fi: StructFuseFileInfo): Int = -ENOSYS
    def setxattr(path: String, name: String, value: String, size: Int, flags: Int, position: Int): Int = -ENOSYS
    def getxattr(path: String, name: String, value: Pointer, size: Int, position: Int): Int = -ENOSYS
    def listxattr(path: String, list: Pointer, size: Int): Int = -ENOSYS
    def removexattr(path: String, name: String): Int = -ENOSYS
    def opendir(path: String, fi: StructFuseFileInfo): Int = -ENOSYS
    def readdir(path: String, buf: Pointer, filler: FuseFillDirT, off: Long, fi: StructFuseFileInfo): Int = -ENOSYS
    def releasedir(path: String, fi: StructFuseFileInfo): Int = -ENOSYS
    def fsyncdir(path: String, datasync: Int, fi: StructFuseFileInfo): Int = -ENOSYS
    def init(conn: StructFuseConnInfo): Pointer = null
    def destroy(p1: Pointer): Unit = { }
    def access(path: String, mask: Int): Int = -ENOSYS
    def create(path: String, mode: Short, fi: StructFuseFileInfo): Int = -ENOSYS
    def ftruncate(path: String, size: Long, fi: StructFuseFileInfo): Int = -ENOSYS
    def fgetattr(path: String, buf: StructStat, fi: StructFuseFileInfo): Int = -ENOSYS
    def lock(path: String, fi: StructFuseFileInfo, cmd: Int, _lock: StructFlock): Int = -ENOSYS
    def utimens(path: String, tv: Array[StructTimespec]): Int = -ENOSYS
    def bmap(path: String, blocksize: Int, idx: Pointer): Int = -ENOSYS
    def reserved00(p1: Pointer, p2: Pointer, p3: Pointer, p4: Pointer, p5: Pointer, p6: Pointer, p7: Pointer, p8: Pointer): Int = -ENOSYS
    def reserved01(p1: Pointer, p2: Pointer, p3: Pointer, p4: Pointer, p5: Pointer, p6: Pointer, p7: Pointer, p8: Pointer): Int = -ENOSYS
    def reserved02(p1: Pointer, p2: Pointer, p3: Pointer, p4: Pointer, p5: Pointer, p6: Pointer, p7: Pointer, p8: Pointer): Int = -ENOSYS
    def reserved03(p1: Pointer, p2: Pointer, p3: Pointer, p4: Pointer, p5: Pointer, p6: Pointer, p7: Pointer, p8: Pointer): Int = -ENOSYS
    def reserved04(p1: Pointer, p2: Pointer, p3: Pointer, p4: Pointer, p5: Pointer, p6: Pointer, p7: Pointer, p8: Pointer): Int = -ENOSYS
    def reserved05(p1: Pointer, p2: Pointer, p3: Pointer, p4: Pointer, p5: Pointer, p6: Pointer, p7: Pointer, p8: Pointer): Int = -ENOSYS
    def reserved06(p1: Pointer, p2: Pointer, p3: Pointer, p4: Pointer, p5: Pointer, p6: Pointer, p7: Pointer, p8: Pointer): Int = -ENOSYS
    def reserved07(p1: Pointer, p2: Pointer, p3: Pointer, p4: Pointer, p5: Pointer, p6: Pointer, p7: Pointer, p8: Pointer): Int = -ENOSYS
    def reserved08(p1: Pointer, p2: Pointer, p3: Pointer, p4: Pointer, p5: Pointer, p6: Pointer, p7: Pointer, p8: Pointer): Int = -ENOSYS
    def reserved09(p1: Pointer, p2: Pointer, p3: Pointer, p4: Pointer, p5: Pointer, p6: Pointer, p7: Pointer, p8: Pointer): Int = -ENOSYS
    def reserved10(p1: Pointer, p2: Pointer, p3: Pointer, p4: Pointer, p5: Pointer, p6: Pointer, p7: Pointer, p8: Pointer): Int = -ENOSYS
    def setvolname(volname: String): Int = -ENOSYS
    def exchange(oldpath: String, newpath: String, flags: Int): Int = -ENOSYS
    def getxtimes(path: String, bkuptime: StructTimespec, crtime: StructTimespec): Int = -ENOSYS
    def setbkuptime(path: String, tv: StructTimespec): Int = -ENOSYS
    def setchgtime(path: String, tv: StructTimespec): Int = -ENOSYS
    def setcrtime(path: String, tv: StructTimespec): Int = -ENOSYS
    def chflags(path: String, flags: Int): Int = -ENOSYS
    def setattr_x(p1: String, p2: StructSetattrX): Int = -ENOSYS
    def fsetattr_x(p1: String, p2: StructSetattrX, p3: StructFuseFileInfo): Int = -ENOSYS
  }

  val callbackNames = Array(
    "getattr",
    "readlink",
    "getdir",
    "mknod",
    "mkdir",
    "unlink",
    "rmdir",
    "symlink",
    "rename",
    "link",
    "chmod",
    "chown",
    "truncate",
    "utime",
    "open",
    "read",
    "write",
    "statfs",
    "flush",
    "release",
    "fsync",
    "setxattr",
    "getxattr",
    "listxattr",
    "removexattr",
    "opendir",
    "readdir",
    "releasedir",
    "fsyncdir",
    "init",
    "destroy",
    "access",
    "create",
    "ftruncate",
    "fgetattr",
    "lock",
    "utimens",
    "bmap",
    "reserved00",
    "reserved01",
    "reserved02",
    "reserved03",
    "reserved04",
    "reserved05",
    "reserved06",
    "reserved07",
    "reserved08",
    "reserved09",
    "reserved10",
    "setvolname",
    "exchange",
    "getxtimes",
    "setbkuptime",
    "setchgtime",
    "setcrtime",
    "chflags",
    "setattr_x",
    "fsetattr_x"
  )
}
